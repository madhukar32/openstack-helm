{{- if .Values.manifests.daemonset_controller }}
{{- $envAll := . }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-env
data:
  CONTROLLER_NODES: 10.0.2.15
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: controller-nodemgr-config
data:
  DOCKER_HOST: "unix://mnt/docker.sock"
  CONTROLLER_NODES: 10.0.2.15
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-configdb-config
data:
  CASSANDRA_SEEDS: 10.0.2.15
  CASSANDRA_CLUSTER_NAME: ContrailConfigDB
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: 10.0.2.15
  JVM_EXTRA_OPTS: >-
    -Dcassandra.rpc_port=9161
    -Dcassandra.native_transport_port=9041
    -Dcassandra.ssl_storage_port=7011
    -Dcassandra.storage_port=7010
    -Dcassandra.jmx.local.port=7200
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: zookeeper
spec:
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: zookeeper
        image: "zookeeper:3.4.10"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/zookeeper
          name: zookeeper-config-data
      volumes:
      - name: zookeeper-config-data
        hostPath:
          path: /var/lib/config_zookeeper_data
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-configdb
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-configdb
        image: "cassandra:2.2.10"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: contrail-configdb-config
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: configdb-data
      volumes:
      - name: configdb-data
        hostPath:
          path: /var/lib/configdb
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-control
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-control
        image: "localhost:5000/contrail-controller-control-control:4.0.2.0-35"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-control-dns
        image: "localhost:5000/contrail-controller-control-dns:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-control-named
        image: "localhost:5000/contrail-controller-control-named:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-control-nodemgr
        image: "localhost:5000/contrail-controller-control-nodemgr:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: controller-nodemgr-config
        securityContext:
          privileged: true
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-config
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-config-api
        image: "localhost:5000/contrail-controller-config-api:4.0.2.0-35"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-config-devicemgr
        image: "localhost:5000/contrail-controller-config-devicemgr:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-config-schema
        image: "localhost:5000/contrail-controller-config-schema:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-config-svcmonitor
        image: "localhost:5000/contrail-controller-config-svcmonitor:4.0.2.0-35"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-config-nodemgr
        image: "localhost:5000/contrail-controller-config-nodemgr:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: controller-nodemgr-config
        securityContext:
          privileged: true
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-webui
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-webui-job
        image: "localhost:5000/contrail-controller-webui-job:4.0.2.0-35"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-webui-web
        image: "localhost:5000/contrail-controller-webui-web:4.0.2.0-35"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: rabbitmq
spec:
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: rabbitmq
        image: "rabbitmq:3.6.10"
        imagePullPolicy: ""
        env:
        - name: RABBITMQ_ERLANG_COOKIE
          value: "47EFF3BB-4786-46E0-A5BB-58455B3C2CB4"
        securityContext:
          privileged: true
{{- end }}
