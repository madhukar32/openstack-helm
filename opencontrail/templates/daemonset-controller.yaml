{{- if .Values.manifests.daemonset_controller }}
{{- $envAll := . }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-env
data:
  CONTROLLER_NODES: {{ .Values.conf.controller_nodes }}
  RABBITMQ_NODES: rabbitmq.openstack.svc.cluster.local
  RABBITMQ_PORT: "5672"
  RABBITMQ_USER: rabbitmq
  RABBITMQ_PASSWORD: password
  CONFIG_API_AUTH: keystone
  CONFIG_API_AAA_MODE: cloud-admin
  ANALYTICS_API_AAA_MODE: cloud-admin
  CONFIG_AUTHN_SERVER: keystone-api.openstack.svc.cluster.local
  ADMIN_USER: admin
  ADMIN_TENANT: admin
  ADMIN_PASSWORD: password
  AUTH_URL_VERSION: v3
  AUTH_URL_TOKENS: /v3/auth/tokens
  DOCKER_HOST: "unix://mnt/docker.sock"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-webui-env
data:
  CONTROLLER_NODES: {{ .Values.conf.controller_nodes }}
  orchestration_Manager: openstack
  identityManager_ip: keystone-api.openstack.svc.cluster.local
  identityManager_port: "80"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-configdb-config
data:
# TODO: fix seeds and listen address
  CASSANDRA_SEEDS: {{ .Values.conf.controller_nodes }}
  CASSANDRA_CLUSTER_NAME: ContrailConfigDB
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: {{ .Values.conf.controller_nodes }}
  JVM_EXTRA_OPTS: >-
    -Dcassandra.rpc_port=9161
    -Dcassandra.native_transport_port=9041
    -Dcassandra.ssl_storage_port=7011
    -Dcassandra.storage_port=7010
    -Dcassandra.jmx.local.port=7200
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: zookeeper
spec:
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: zookeeper
        image: {{ .Values.images.tags.zookeeper | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/zookeeper
          name: zookeeper-config-data
      volumes:
      - name: zookeeper-config-data
        hostPath:
          path: /var/lib/config_zookeeper_data
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-configdb
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-configdb
        image: {{ .Values.images.tags.cassandra | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: contrail-configdb-config
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: configdb-data
      volumes:
      - name: configdb-data
        hostPath:
          path: /var/lib/configdb
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-control
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-control
        image: {{ .Values.images.tags.control_control | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-control-dns
        image: {{ .Values.images.tags.control_dns | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-control-named
        image: {{ .Values.images.tags.control_named | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-control-nodemgr
        image: {{ .Values.images.tags.control_nodemgr | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-config
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-config-api
        image: {{ .Values.images.tags.config_api | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-config-devicemgr
        image: {{ .Values.images.tags.config_devicemgr | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-config-schema
        image: {{ .Values.images.tags.config_schema_transformer | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
      - name: contrail-controller-config-svcmonitor
        image: {{ .Values.images.tags.config_svcmonitor | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-env
      - name: contrail-controller-config-nodemgr
        image: {{ .Values.images.tags.config_nodemgr | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-env
        securityContext:
          privileged: true
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-webui
spec:
  template:
    metadata:
      labels:
{{ tuple $envAll "opencontrail" "controller" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{ .Values.labels.controller.node_selector_key }}
                operator: In
                values:
                - {{ .Values.labels.controller.node_selector_value }}
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-webui-job
        image: {{ .Values.images.tags.webui_job | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: config-webui-env
      - name: contrail-controller-webui-web
        image: {{ .Values.images.tags.webui_web | quote }}
        imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: config-webui-env
        securityContext:
          privileged: true
{{- end }}
